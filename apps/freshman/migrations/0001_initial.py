# Generated by Django 2.1 on 2019-08-08 12:29

import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Freshman',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('newname', models.CharField(max_length=50, verbose_name='姓名')),
                ('gender', models.CharField(max_length=5, verbose_name='性别')),
                ('college', models.CharField(max_length=30, verbose_name='所属学院')),
                ('major', models.CharField(max_length=100, verbose_name='所属专业')),
                ('newclass', models.CharField(max_length=20, verbose_name='班级')),
                ('phone', models.CharField(max_length=11, verbose_name='手机')),
                ('qq', models.CharField(max_length=15, verbose_name='QQ号')),
                ('email', models.CharField(max_length=30, verbose_name='邮箱')),
                ('direction', models.CharField(choices=[('development', '开发'), ('design', '设计'), ('secretariat', '秘书处')], max_length=15, verbose_name='选择方向')),
                ('appointment_one', models.DateTimeField(blank=True, null=True, verbose_name='预约时间一')),
                ('appointment_two', models.DateTimeField(blank=True, null=True, verbose_name='预约时间二')),
                ('application', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='申请书')),
                ('interview_time', models.DateTimeField(blank=True, null=True, verbose_name='面试时间')),
                ('interview_place', models.CharField(blank=True, max_length=50, null=True, verbose_name='面试地点')),
                ('score', models.IntegerField(blank=True, null=True, verbose_name='评分')),
                ('evaluate', models.TextField(blank=True, max_length=300, null=True, verbose_name='评价')),
                ('interview_result', models.CharField(blank=True, choices=[('A_passd', '面试A轮通过'), ('A_failed', '面试A轮失败'), ('B_passd', '面试B轮通过'), ('B_failed', '面试B轮失败')], max_length=50, null=True, verbose_name='面试结果')),
                ('interview_name', models.CharField(blank=True, max_length=60, null=True, verbose_name='面试官')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '新生信息',
                'verbose_name_plural': '新生信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
